{"version":3,"sources":["maxpanel-ember/tests/adapters/application.jshint.js","maxpanel-ember/tests/adapters/status.jshint.js","maxpanel-ember/tests/app.jshint.js","maxpanel-ember/tests/controllers/events/index.jshint.js","maxpanel-ember/tests/helpers/destroy-app.js","maxpanel-ember/tests/helpers/destroy-app.jshint.js","maxpanel-ember/tests/helpers/module-for-acceptance.js","maxpanel-ember/tests/helpers/module-for-acceptance.jshint.js","maxpanel-ember/tests/helpers/resolver.js","maxpanel-ember/tests/helpers/resolver.jshint.js","maxpanel-ember/tests/helpers/start-app.js","maxpanel-ember/tests/helpers/start-app.jshint.js","maxpanel-ember/tests/models/client.jshint.js","maxpanel-ember/tests/models/event.jshint.js","maxpanel-ember/tests/models/listener.jshint.js","maxpanel-ember/tests/models/maxscale-session.jshint.js","maxpanel-ember/tests/models/module.jshint.js","maxpanel-ember/tests/models/server.jshint.js","maxpanel-ember/tests/models/service.jshint.js","maxpanel-ember/tests/models/status.jshint.js","maxpanel-ember/tests/models/variable.jshint.js","maxpanel-ember/tests/resolver.jshint.js","maxpanel-ember/tests/router.jshint.js","maxpanel-ember/tests/routes/clients/index.jshint.js","maxpanel-ember/tests/routes/events/index.jshint.js","maxpanel-ember/tests/routes/index.jshint.js","maxpanel-ember/tests/routes/listeners/index.jshint.js","maxpanel-ember/tests/routes/maxscale-sessions/index.jshint.js","maxpanel-ember/tests/routes/modules/index.jshint.js","maxpanel-ember/tests/routes/servers/index.jshint.js","maxpanel-ember/tests/routes/services/index.jshint.js","maxpanel-ember/tests/routes/sessions/index.jshint.js","maxpanel-ember/tests/routes/status/index.jshint.js","maxpanel-ember/tests/routes/variables/index.jshint.js","maxpanel-ember/tests/routes/welcome/index.jshint.js","maxpanel-ember/tests/serializers/client.jshint.js","maxpanel-ember/tests/serializers/event.jshint.js","maxpanel-ember/tests/serializers/listener.jshint.js","maxpanel-ember/tests/serializers/maxscale-session.jshint.js","maxpanel-ember/tests/serializers/module.jshint.js","maxpanel-ember/tests/serializers/server.jshint.js","maxpanel-ember/tests/serializers/service.jshint.js","maxpanel-ember/tests/serializers/status.jshint.js","maxpanel-ember/tests/serializers/variable.jshint.js","maxpanel-ember/tests/test-helper.js","maxpanel-ember/tests/test-helper.jshint.js","maxpanel-ember/tests/unit/adapters/application-test.js","maxpanel-ember/tests/unit/adapters/application-test.jshint.js","maxpanel-ember/tests/unit/adapters/status-test.js","maxpanel-ember/tests/unit/adapters/status-test.jshint.js","maxpanel-ember/tests/unit/controllers/events/index-test.js","maxpanel-ember/tests/unit/controllers/events/index-test.jshint.js","maxpanel-ember/tests/unit/models/client-test.js","maxpanel-ember/tests/unit/models/client-test.jshint.js","maxpanel-ember/tests/unit/models/clients-test.js","maxpanel-ember/tests/unit/models/clients-test.jshint.js","maxpanel-ember/tests/unit/models/event-test.js","maxpanel-ember/tests/unit/models/event-test.jshint.js","maxpanel-ember/tests/unit/models/listener-test.js","maxpanel-ember/tests/unit/models/listener-test.jshint.js","maxpanel-ember/tests/unit/models/maxscale-session-test.js","maxpanel-ember/tests/unit/models/maxscale-session-test.jshint.js","maxpanel-ember/tests/unit/models/module-test.js","maxpanel-ember/tests/unit/models/module-test.jshint.js","maxpanel-ember/tests/unit/models/server-test.js","maxpanel-ember/tests/unit/models/server-test.jshint.js","maxpanel-ember/tests/unit/models/service-test.js","maxpanel-ember/tests/unit/models/service-test.jshint.js","maxpanel-ember/tests/unit/models/status-test.js","maxpanel-ember/tests/unit/models/status-test.jshint.js","maxpanel-ember/tests/unit/models/variable-test.js","maxpanel-ember/tests/unit/models/variable-test.jshint.js","maxpanel-ember/tests/unit/routes/client-test.js","maxpanel-ember/tests/unit/routes/client-test.jshint.js","maxpanel-ember/tests/unit/routes/clients/index-test.js","maxpanel-ember/tests/unit/routes/clients/index-test.jshint.js","maxpanel-ember/tests/unit/routes/events/index-test.js","maxpanel-ember/tests/unit/routes/events/index-test.jshint.js","maxpanel-ember/tests/unit/routes/listeners/index-test.js","maxpanel-ember/tests/unit/routes/listeners/index-test.jshint.js","maxpanel-ember/tests/unit/routes/maxscale-sessions/index-test.js","maxpanel-ember/tests/unit/routes/maxscale-sessions/index-test.jshint.js","maxpanel-ember/tests/unit/routes/modules/index-test.js","maxpanel-ember/tests/unit/routes/modules/index-test.jshint.js","maxpanel-ember/tests/unit/routes/servers/index-test.js","maxpanel-ember/tests/unit/routes/servers/index-test.jshint.js","maxpanel-ember/tests/unit/routes/services/index-test.js","maxpanel-ember/tests/unit/routes/services/index-test.jshint.js","maxpanel-ember/tests/unit/routes/sessions/index-test.js","maxpanel-ember/tests/unit/routes/sessions/index-test.jshint.js","maxpanel-ember/tests/unit/routes/status/index-test.js","maxpanel-ember/tests/unit/routes/status/index-test.jshint.js","maxpanel-ember/tests/unit/routes/variables/index-test.js","maxpanel-ember/tests/unit/routes/variables/index-test.jshint.js","maxpanel-ember/tests/unit/routes/welcome/index-test.js","maxpanel-ember/tests/unit/routes/welcome/index-test.jshint.js","maxpanel-ember/tests/unit/serializers/application-test.js","maxpanel-ember/tests/unit/serializers/application-test.jshint.js","maxpanel-ember/tests/unit/serializers/clients-test.js","maxpanel-ember/tests/unit/serializers/clients-test.jshint.js","maxpanel-ember/tests/unit/serializers/event-test.js","maxpanel-ember/tests/unit/serializers/event-test.jshint.js","maxpanel-ember/tests/unit/serializers/listener-test.js","maxpanel-ember/tests/unit/serializers/listener-test.jshint.js","maxpanel-ember/tests/unit/serializers/maxscale-session-test.js","maxpanel-ember/tests/unit/serializers/maxscale-session-test.jshint.js","maxpanel-ember/tests/unit/serializers/module-test.js","maxpanel-ember/tests/unit/serializers/module-test.jshint.js","maxpanel-ember/tests/unit/serializers/server-test.js","maxpanel-ember/tests/unit/serializers/server-test.jshint.js","maxpanel-ember/tests/unit/serializers/service-test.js","maxpanel-ember/tests/unit/serializers/service-test.jshint.js","maxpanel-ember/tests/unit/serializers/status-test.js","maxpanel-ember/tests/unit/serializers/status-test.jshint.js","maxpanel-ember/tests/unit/serializers/variable-test.js","maxpanel-ember/tests/unit/serializers/variable-test.jshint.js","maxpanel-ember/tests/unit/services/ajax-test.js","maxpanel-ember/tests/unit/services/ajax-test.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('maxpanel-ember/tests/adapters/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - adapters/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/adapters/status.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - adapters/status.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/status.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/controllers/events/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/events/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/events/index.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('maxpanel-ember/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'maxpanel-ember/tests/helpers/start-app', 'maxpanel-ember/tests/helpers/destroy-app'], function (exports, _qunit, _maxpanelEmberTestsHelpersStartApp, _maxpanelEmberTestsHelpersDestroyApp) {\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _maxpanelEmberTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        if (options.afterEach) {\n          options.afterEach.apply(this, arguments);\n        }\n\n        (0, _maxpanelEmberTestsHelpersDestroyApp['default'])(this.application);\n      }\n    });\n  };\n});","define('maxpanel-ember/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/helpers/resolver', ['exports', 'maxpanel-ember/resolver', 'maxpanel-ember/config/environment'], function (exports, _maxpanelEmberResolver, _maxpanelEmberConfigEnvironment) {\n\n  var resolver = _maxpanelEmberResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _maxpanelEmberConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _maxpanelEmberConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('maxpanel-ember/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/helpers/start-app', ['exports', 'ember', 'maxpanel-ember/app', 'maxpanel-ember/config/environment'], function (exports, _ember, _maxpanelEmberApp, _maxpanelEmberConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _maxpanelEmberConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _maxpanelEmberApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('maxpanel-ember/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/models/client.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/client.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/client.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/models/event.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/event.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/event.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/models/listener.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/listener.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/listener.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/models/maxscale-session.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/maxscale-session.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/maxscale-session.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/models/module.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/module.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/module.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/models/server.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/server.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/server.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/models/service.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/service.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/service.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/models/status.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/status.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/status.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/models/variable.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/variable.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/variable.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/routes/clients/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/clients/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/clients/index.js should pass jshint.\\nroutes/clients/index.js: line 18, col 7, Expected \\'{\\' and instead saw \\'return\\'.\\n\\n1 error');\n  });\n});","define('maxpanel-ember/tests/routes/events/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/events/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/events/index.js should pass jshint.\\nroutes/events/index.js: line 17, col 7, Expected \\'{\\' and instead saw \\'return\\'.\\n\\n1 error');\n  });\n});","define('maxpanel-ember/tests/routes/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/routes/listeners/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/listeners/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/listeners/index.js should pass jshint.\\nroutes/listeners/index.js: line 17, col 7, Expected \\'{\\' and instead saw \\'return\\'.\\n\\n1 error');\n  });\n});","define('maxpanel-ember/tests/routes/maxscale-sessions/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/maxscale-sessions/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/maxscale-sessions/index.js should pass jshint.\\nroutes/maxscale-sessions/index.js: line 17, col 7, Expected \\'{\\' and instead saw \\'return\\'.\\n\\n1 error');\n  });\n});","define('maxpanel-ember/tests/routes/modules/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/modules/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/modules/index.js should pass jshint.\\nroutes/modules/index.js: line 17, col 7, Expected \\'{\\' and instead saw \\'return\\'.\\n\\n1 error');\n  });\n});","define('maxpanel-ember/tests/routes/servers/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/servers/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/servers/index.js should pass jshint.\\nroutes/servers/index.js: line 17, col 7, Expected \\'{\\' and instead saw \\'return\\'.\\n\\n1 error');\n  });\n});","define('maxpanel-ember/tests/routes/services/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/services/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/services/index.js should pass jshint.\\nroutes/services/index.js: line 17, col 7, Expected \\'{\\' and instead saw \\'return\\'.\\n\\n1 error');\n  });\n});","define('maxpanel-ember/tests/routes/sessions/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/sessions/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/sessions/index.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/routes/status/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/status/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/status/index.js should pass jshint.\\nroutes/status/index.js: line 17, col 7, Expected \\'{\\' and instead saw \\'return\\'.\\n\\n1 error');\n  });\n});","define('maxpanel-ember/tests/routes/variables/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/variables/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/variables/index.js should pass jshint.\\nroutes/variables/index.js: line 17, col 7, Expected \\'{\\' and instead saw \\'return\\'.\\n\\n1 error');\n  });\n});","define('maxpanel-ember/tests/routes/welcome/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/welcome/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/welcome/index.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/serializers/client.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers/client.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/client.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/serializers/event.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers/event.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/event.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/serializers/listener.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers/listener.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/listener.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/serializers/maxscale-session.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers/maxscale-session.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/maxscale-session.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/serializers/module.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers/module.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/module.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/serializers/server.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers/server.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/server.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/serializers/service.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers/service.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/service.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/serializers/status.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers/status.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/status.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/serializers/variable.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers/variable.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/variable.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/test-helper', ['exports', 'maxpanel-ember/tests/helpers/resolver', 'ember-qunit'], function (exports, _maxpanelEmberTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_maxpanelEmberTestsHelpersResolver['default']);\n});","define('maxpanel-ember/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/unit/adapters/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'Unit | Adapter | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('maxpanel-ember/tests/unit/adapters/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/adapters/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/unit/adapters/status-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:status', 'Unit | Adapter | status', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('maxpanel-ember/tests/unit/adapters/status-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/adapters/status-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/status-test.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/unit/controllers/events/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:events/index', 'Unit | Controller | events/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('maxpanel-ember/tests/unit/controllers/events/index-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/controllers/events/index-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/events/index-test.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/unit/models/client-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('client', 'Unit | Model | client', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('maxpanel-ember/tests/unit/models/client-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models/client-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/client-test.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/unit/models/clients-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('clients', 'Unit | Model | clients', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('maxpanel-ember/tests/unit/models/clients-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models/clients-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/clients-test.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/unit/models/event-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('event', 'Unit | Model | event', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('maxpanel-ember/tests/unit/models/event-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models/event-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/event-test.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/unit/models/listener-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('listener', 'Unit | Model | listener', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('maxpanel-ember/tests/unit/models/listener-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models/listener-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/listener-test.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/unit/models/maxscale-session-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('maxscale-session', 'Unit | Model | maxscale session', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('maxpanel-ember/tests/unit/models/maxscale-session-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models/maxscale-session-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/maxscale-session-test.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/unit/models/module-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('module', 'Unit | Model | module', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('maxpanel-ember/tests/unit/models/module-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models/module-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/module-test.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/unit/models/server-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('server', 'Unit | Model | server', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('maxpanel-ember/tests/unit/models/server-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models/server-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/server-test.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/unit/models/service-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('service', 'Unit | Model | service', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('maxpanel-ember/tests/unit/models/service-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models/service-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/service-test.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/unit/models/status-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('status', 'Unit | Model | status', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('maxpanel-ember/tests/unit/models/status-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models/status-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/status-test.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/unit/models/variable-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('variable', 'Unit | Model | variable', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('maxpanel-ember/tests/unit/models/variable-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models/variable-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/variable-test.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/unit/routes/client-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:client', 'Unit | Route | client', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('maxpanel-ember/tests/unit/routes/client-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/client-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/client-test.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/unit/routes/clients/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:clients/index', 'Unit | Route | clients/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('maxpanel-ember/tests/unit/routes/clients/index-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/clients/index-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/clients/index-test.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/unit/routes/events/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:events/index', 'Unit | Route | events/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('maxpanel-ember/tests/unit/routes/events/index-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/events/index-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/events/index-test.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/unit/routes/listeners/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:listeners/index', 'Unit | Route | listeners/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('maxpanel-ember/tests/unit/routes/listeners/index-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/listeners/index-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/listeners/index-test.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/unit/routes/maxscale-sessions/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:maxscale-sessions/index', 'Unit | Route | maxscale sessions/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('maxpanel-ember/tests/unit/routes/maxscale-sessions/index-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/maxscale-sessions/index-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/maxscale-sessions/index-test.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/unit/routes/modules/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:modules/index', 'Unit | Route | modules/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('maxpanel-ember/tests/unit/routes/modules/index-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/modules/index-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/modules/index-test.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/unit/routes/servers/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:servers/index', 'Unit | Route | servers/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('maxpanel-ember/tests/unit/routes/servers/index-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/servers/index-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/servers/index-test.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/unit/routes/services/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:services/index', 'Unit | Route | services/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('maxpanel-ember/tests/unit/routes/services/index-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/services/index-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/services/index-test.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/unit/routes/sessions/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:sessions/index', 'Unit | Route | sessions/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('maxpanel-ember/tests/unit/routes/sessions/index-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/sessions/index-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/sessions/index-test.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/unit/routes/status/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:status/index', 'Unit | Route | status/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('maxpanel-ember/tests/unit/routes/status/index-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/status/index-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/status/index-test.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/unit/routes/variables/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:variables/index', 'Unit | Route | variables/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('maxpanel-ember/tests/unit/routes/variables/index-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/variables/index-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/variables/index-test.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/unit/routes/welcome/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:welcome/index', 'Unit | Route | welcome/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('maxpanel-ember/tests/unit/routes/welcome/index-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/welcome/index-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/welcome/index-test.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/unit/serializers/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('application', 'Unit | Serializer | application', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:application']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('maxpanel-ember/tests/unit/serializers/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/serializers/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/application-test.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/unit/serializers/clients-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('clients', 'Unit | Serializer | clients', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:clients']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('maxpanel-ember/tests/unit/serializers/clients-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/serializers/clients-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/clients-test.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/unit/serializers/event-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('event', 'Unit | Serializer | event', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:event']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('maxpanel-ember/tests/unit/serializers/event-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/serializers/event-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/event-test.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/unit/serializers/listener-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('listener', 'Unit | Serializer | listener', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:listener']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('maxpanel-ember/tests/unit/serializers/listener-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/serializers/listener-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/listener-test.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/unit/serializers/maxscale-session-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('maxscale-session', 'Unit | Serializer | maxscale session', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:maxscale-session']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('maxpanel-ember/tests/unit/serializers/maxscale-session-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/serializers/maxscale-session-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/maxscale-session-test.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/unit/serializers/module-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('module', 'Unit | Serializer | module', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:module']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('maxpanel-ember/tests/unit/serializers/module-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/serializers/module-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/module-test.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/unit/serializers/server-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('server', 'Unit | Serializer | server', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:server']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('maxpanel-ember/tests/unit/serializers/server-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/serializers/server-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/server-test.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/unit/serializers/service-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('service', 'Unit | Serializer | service', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:service']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('maxpanel-ember/tests/unit/serializers/service-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/serializers/service-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/service-test.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/unit/serializers/status-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('status', 'Unit | Serializer | status', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:status']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('maxpanel-ember/tests/unit/serializers/status-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/serializers/status-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/status-test.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/unit/serializers/variable-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('variable', 'Unit | Serializer | variable', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:variable']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('maxpanel-ember/tests/unit/serializers/variable-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/serializers/variable-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/variable-test.js should pass jshint.');\n  });\n});","define('maxpanel-ember/tests/unit/services/ajax-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:ajax', 'Unit | Service | ajax', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('maxpanel-ember/tests/unit/services/ajax-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/services/ajax-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/ajax-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('maxpanel-ember/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}